;;
;; Galaforce 1 ( BBC Micro ) from the original 6502 source code, adapted to assemble using beebasm
;;
;; (c) Kevin Edwards 1986-2019
;;
;; Twitter @KevEdwardsRetro
;;

;; REM SAVE"VECTORS"
;; B%=P%
;; [OPT pass

vecwavl:
.byte  (wave0 .mod 256)
.byte  (wave1 .mod 256)
.byte  (wave2 .mod 256)
.byte  (wave3 .mod 256)
.byte  (wave4 .mod 256)
.byte  (wave5 .mod 256)
.byte  (wave6 .mod 256)
.byte  (wave7 .mod 256)
.byte  (wave8 .mod 256)
.byte  (wave9 .mod 256)
.byte  (wave10 .mod 256)
.byte  (wave11 .mod 256)
.byte  (wave12 .mod 256)
.byte  (wave13 .mod 256)
.byte  (wave14 .mod 256)
.byte  (wave15 .mod 256)
vecwavh:
.byte  (wave0 / 256)
.byte  (wave1 / 256)
.byte  (wave2 / 256)
.byte  (wave3 / 256)
.byte  (wave4 / 256)
.byte  (wave5 / 256)
.byte  (wave6 / 256)
.byte  (wave7 / 256)
.byte  (wave8 / 256)
.byte  (wave9 / 256)
.byte  (wave10 / 256)
.byte  (wave11 / 256)
.byte  (wave12 / 256)
.byte  (wave13 / 256)
.byte  (wave14 / 256)
.byte  (wave15 / 256)
vecpatl:
.byte  (patt0 .mod 256)
.byte  (patt1 .mod 256)
.byte  (patt2 .mod 256)
.byte  (patt3 .mod 256)
.byte  (patt4 .mod 256)
.byte  (patt5 .mod 256)
.byte  (patt6 .mod 256)
.byte  (patt7 .mod 256)
.byte  (patt8 .mod 256)
.byte  (patt9 .mod 256)
.byte  (patt10 .mod 256)
.byte  (patt11 .mod 256)
.byte  (patt12 .mod 256)
.byte  (patt13 .mod 256)
.byte  (patt14 .mod 256)
.byte  (patt15 .mod 256)
.byte  (patt16 .mod 256)
.byte  (patt17 .mod 256)
.byte  (patt18 .mod 256)
.byte  (patt19 .mod 256)
.byte  (patt20 .mod 256)
.byte  (patt21 .mod 256)
.byte  (patt22 .mod 256)
.byte  (patt23 .mod 256)
.byte  (patt24 .mod 256)
.byte  (patt25 .mod 256)
.byte  (patt26 .mod 256)
.byte  (patt27 .mod 256)
.byte  (patt28 .mod 256)
.byte  (patt29 .mod 256)
.byte  (patt30 .mod 256)
.byte  (patt31 .mod 256)
.byte  (patt32 .mod 256)
.byte  (patt33 .mod 256)
.byte  (patt34 .mod 256)
.byte  (patt35 .mod 256)
.byte  (patt36 .mod 256)
.byte  (patt37 .mod 256)
.byte  (patt38 .mod 256)
.byte  (patt39 .mod 256)
.byte  (patt40 .mod 256)
.byte  (patt41 .mod 256)
.byte  (patt42 .mod 256)
.byte  (patt43 .mod 256)
.byte  (patt44 .mod 256)
.byte  (patt45 .mod 256)
vecpath:
.byte  (patt0 / 256)
.byte  (patt1 / 256)
.byte  (patt2 / 256)
.byte  (patt3 / 256)
.byte  (patt4 / 256)
.byte  (patt5 / 256)
.byte  (patt6 / 256)
.byte  (patt7 / 256)
.byte  (patt8 / 256)
.byte  (patt9 / 256)
.byte  (patt10 / 256)
.byte  (patt11 / 256)
.byte  (patt12 / 256)
.byte  (patt13 / 256)
.byte  (patt14 / 256)
.byte  (patt15 / 256)
.byte  (patt16 / 256)
.byte  (patt17 / 256)
.byte  (patt18 / 256)
.byte  (patt19 / 256)
.byte  (patt20 / 256)
.byte  (patt21 / 256)
.byte  (patt22 / 256)
.byte  (patt23 / 256)
.byte  (patt24 / 256)
.byte  (patt25 / 256)
.byte  (patt26 / 256)
.byte  (patt27 / 256)
.byte  (patt28 / 256)
.byte  (patt29 / 256)
.byte  (patt30 / 256)
.byte  (patt31 / 256)
.byte  (patt32 / 256)
.byte  (patt33 / 256)
.byte  (patt34 / 256)
.byte  (patt35 / 256)
.byte  (patt36 / 256)
.byte  (patt37 / 256)
.byte  (patt38 / 256)
.byte  (patt39 / 256)
.byte  (patt40 / 256)
.byte  (patt41 / 256)
.byte  (patt42 / 256)
.byte  (patt43 / 256)
.byte  (patt44 / 256)
.byte  (patt45 / 256)
vecpatdl:
.byte  (patdat0 .mod 256)
.byte  (patdat1 .mod 256)
.byte  (patdat2 .mod 256)
.byte  (patdat3 .mod 256)
.byte  (patdat4 .mod 256)
.byte  (patdat5 .mod 256)
.byte  (patdat6 .mod 256)
.byte  (patdat7 .mod 256)
.byte  (patdat8 .mod 256)
.byte  (patdat9 .mod 256)
.byte  (patdat10 .mod 256)
.byte  (patdat11 .mod 256)
.byte  (patdat12 .mod 256)
.byte  (patdat13 .mod 256)
.byte  (patdat14 .mod 256)
.byte  (patdat15 .mod 256)
.byte  (patdat16 .mod 256)
.byte  (patdat17 .mod 256)
.byte  (patdat18 .mod 256)
.byte  (patdat19 .mod 256)
.byte  (patdat20 .mod 256)
.byte  (patdat21 .mod 256)
.byte  (patdat22 .mod 256)
.byte  (patdat23 .mod 256)
.byte  (patdat24 .mod 256)
.byte  (patdat25 .mod 256)
.byte  (patdat26 .mod 256)
.byte  (patdat27 .mod 256)
.byte  (patdat28 .mod 256)
.byte  (patdat29 .mod 256)
vecpatdh:
.byte  (patdat0 / 256)
.byte  (patdat1 / 256)
.byte  (patdat2 / 256)
.byte  (patdat3 / 256)
.byte  (patdat4 / 256)
.byte  (patdat5 / 256)
.byte  (patdat6 / 256)
.byte  (patdat7 / 256)
.byte  (patdat8 / 256)
.byte  (patdat9 / 256)
.byte  (patdat10 / 256)
.byte  (patdat11 / 256)
.byte  (patdat12 / 256)
.byte  (patdat13 / 256)
.byte  (patdat14 / 256)
.byte  (patdat15 / 256)
.byte  (patdat16 / 256)
.byte  (patdat17 / 256)
.byte  (patdat18 / 256)
.byte  (patdat19 / 256)
.byte  (patdat20 / 256)
.byte  (patdat21 / 256)
.byte  (patdat22 / 256)
.byte  (patdat23 / 256)
.byte  (patdat24 / 256)
.byte  (patdat25 / 256)
.byte  (patdat26 / 256)
.byte  (patdat27 / 256)
.byte  (patdat28 / 256)
.byte  (patdat29 / 256)


;; ]
;; PRINT"Vectors from &";~B%;" to &";~P%-1;" (";P%-B%;")"
;; PAGE=&5800
;; RETURN
